#===================== DO NOT EDIT THIS BLOCK =================================#
import collections
from collections import namedtuple

PASS = "PASS"
TEXT_FORMAT = "text"  # question type when expected answer is a str, int, float, or bool
TEXT_FORMAT_NAMEDTUPLE = "text namedtuple"  # question type when expected answer is a namedtuple
TEXT_FORMAT_UNORDERED_LIST = "text list_unordered"  # question type when the expected answer is a list where the order does *not* matter
TEXT_FORMAT_ORDERED_LIST = "text list_ordered"  # question type when the expected answer is a list where the order does matter
TEXT_FORMAT_ORDERED_LIST_NAMEDTUPLE = "text list_ordered namedtuple"  # question type when the expected answer is a list of namedtuples where the order does matter
TEXT_FORMAT_SPECIAL_ORDERED_LIST = "text list_special_ordered"  # question type when the expected answer is a list where order does matter, but with possible ties. All tied elements are put in a list, where internal order does not matter.
TEXT_FORMAT_DICT = "text dict"  # question type when the expected answer is a dictionary
TEXT_FORMAT_LIST_DICTS_ORDERED = "text list_dicts_ordered"  # question type when the expected answer is a list of dicts where the order does matter
PNG_FORMAT = "png"  # use when the expected answer is an image
HTML_FORMAT = "html"
FILE_FORMAT = "file"
FILE_JSON_FORMAT = "file json"

Question = collections.namedtuple("Question", ["number", "weight", "format"])
#===================== DO NOT EDIT THIS BLOCK =================================#


# EDIT THIS: definitions specific to this project
import os
Comment = collections.namedtuple("Comment", ['video_id', 'comment_length', 'author_id', 'likes', 'published_at'])

# EDIT THIS
REQUIRED_FILES = [os.path.join('data', 'channel_ids1.json'),
         os.path.join('data', 'channel_ids2.json'),
         os.path.join('data', 'channel_ids3.json'),
         os.path.join('data', 'channel_ids4.json'),
         os.path.join('data', 'channel_ids5.json'),
         os.path.join('data', 'comment_data1.csv'),
         os.path.join('data', 'comment_data2.csv'),
         os.path.join('data', 'comment_data3.csv'),
         os.path.join('data', 'comment_data4.csv'),
         os.path.join('data', 'comment_data5.csv'),
         os.path.join('data', 'video_data.csv'),
         os.path.join('data', 'video_ids.json'),
         os.path.join('data', '.channel_ids0.json'),
         os.path.join('data', '.hidden.txt')]


# EDIT THIS
questions = [
    Question(number=1, weight=1, format=TEXT_FORMAT_ORDERED_LIST),
    Question(number=2, weight=1, format=TEXT_FORMAT_ORDERED_LIST),
    Question(number=3, weight=1, format=TEXT_FORMAT_ORDERED_LIST),
    Question(number=4, weight=1, format=TEXT_FORMAT_ORDERED_LIST),
    Question(number=5, weight=1, format=TEXT_FORMAT),
    Question(number=6, weight=1, format=TEXT_FORMAT),
    Question(number=7, weight=1, format=TEXT_FORMAT_NAMEDTUPLE),
    Question(number=8, weight=1, format=TEXT_FORMAT),
    Question(number=9, weight=1, format=TEXT_FORMAT),
    Question(number=10, weight=1, format=TEXT_FORMAT),
    Question(number=11, weight=1, format=TEXT_FORMAT),
    Question(number=12, weight=1, format=TEXT_FORMAT),
    Question(number=13, weight=1, format=TEXT_FORMAT_DICT),
    Question(number=14, weight=1, format=TEXT_FORMAT),
    Question(number=15, weight=1, format=TEXT_FORMAT),
    Question(number=16, weight=1, format=TEXT_FORMAT),
    Question(number=17, weight=1, format=TEXT_FORMAT_UNORDERED_LIST),
    Question(number=18, weight=1, format=TEXT_FORMAT_ORDERED_LIST),
    Question(number=19, weight=1, format=TEXT_FORMAT_UNORDERED_LIST),
    Question(number=20, weight=1, format=TEXT_FORMAT_SPECIAL_ORDERED_LIST), # DO NOT check answer by manual lookup of the test file. The answer is stored in a different format here. Run test.py to check if your answer is correct.
]

# EDIT THIS
expected_json = {
    "1": ['channel_ids1.json',
             'channel_ids2.json',
             'channel_ids3.json',
             'channel_ids4.json',
             'channel_ids5.json',
             'comment_data1.csv',
             'comment_data2.csv',
             'comment_data3.csv',
             'comment_data4.csv',
             'comment_data5.csv',
             'video_data.csv',
             'video_ids.json'],
    "2": [os.path.join('data', 'channel_ids1.json'),
             os.path.join('data', 'channel_ids2.json'),
             os.path.join('data', 'channel_ids3.json'),
             os.path.join('data', 'channel_ids4.json'),
             os.path.join('data', 'channel_ids5.json'),
             os.path.join('data', 'comment_data1.csv'),
             os.path.join('data', 'comment_data2.csv'),
             os.path.join('data', 'comment_data3.csv'),
             os.path.join('data', 'comment_data4.csv'),
             os.path.join('data', 'comment_data5.csv'),
             os.path.join('data', 'video_data.csv'),
             os.path.join('data', 'video_ids.json')],
    "3": [os.path.join('data', 'comment_data1.csv'),
             os.path.join('data', 'comment_data2.csv'),
             os.path.join('data', 'comment_data3.csv'),
             os.path.join('data', 'comment_data4.csv'),
             os.path.join('data', 'comment_data5.csv')],
    "4": [os.path.join('data', 'channel_ids1.json'),
             os.path.join('data', 'channel_ids2.json'),
             os.path.join('data', 'channel_ids3.json'),
             os.path.join('data', 'channel_ids4.json'),
             os.path.join('data', 'channel_ids5.json')],
    "5": 'Al Jazeera English',
    "6": 372,
    "7": Comment(video_id='udNXMAflbU8', comment_length=175, author_id='UCHkk7x38KWgqjQOHqsQwf0Q', likes=47, published_at='2021-10-10 17:48:38'),
    "8": 67,
    "9": 86.86953042956443,
    "10": 'UCIPPMRA040LQr5QPyJEbmXA',
    "11": 19,
    "12": 606,
    "13": {'title': 'SWAWS | Totally Accurate Battlegrounds',
             'channel_name': 'TheRussianBadger',
             'published_at': '2021-10-12 19:01:41',
             'duration': '00:18:46',
             'category': 'Gaming',
             'tags': ['tot',
              'totally accurate battlegrounds',
              'tabg',
              'totally accurate battle simulator',
              'totally accurate battlegrounds gameplay',
              'totally accurate battle grounds',
              'tabg gameplay',
              'tabg game',
              'tabs',
              'totally accurate',
              'totally accurate battle royale',
              'battle royale',
              'tabg funny',
              'fortnite',
              'battlegrounds',
              'tabs battle royale',
              'new battle royale',
              'pubg',
              'totally accurate battlegrounds funny',
              'swaws',
              'swaws meme',
              'swaws russian badger',
              'tabg update',
              'tabg win',
              'tabg br',
              'free to play pc games',
              'free to play'],
             'views': 3172185,
             'ratings_enabled': True,
             'likes': 210951,
             'dislikes': 1824,
             'comments': ['UgzgwN2JXxjTN4mR5954AaABAg.9TPxukUd20g9TQLnJi3RFU',
              'Ugw8z3sbkSQQpgINHdl4AaABAg',
              'UgyjZAl0XlNg-gOZ0jR4AaABAg.9TPyCmI6pbl9TQAXc7oVx_',
              'Ugy1W1ldfeXB5VavpEB4AaABAg',
              'Ugz-5ND1_48bvR--K-h4AaABAg.9TcESnaSWQO9TwybqLquLh',
              'Ugw8yRjg6yeaJ-KJmvN4AaABAg',
              'Ugxvp2D5qsf_Kz3qLfJ4AaABAg',
              'UgyjZAl0XlNg-gOZ0jR4AaABAg.9TPyCmI6pbl9TS3pUjvdvY',
              'Ugx7Z_ZM2zeYpgTo2V54AaABAg.9TPtkn_qSTN9TQ53TeDjlr',
              'UgyJSgJPxm3-cOi3bSh4AaABAg',
              'UgxpmEEjcu4ATnKp_dt4AaABAg.9TPdawdmb1E9TS4AKca9bH',
              'Ugwq8srR6ykQ2_6mgRB4AaABAg',
              'UgyjZAl0XlNg-gOZ0jR4AaABAg',
              'Ugyvf9XkcWXRZx7icN14AaABAg',
              'UgyjZAl0XlNg-gOZ0jR4AaABAg.9TPyCmI6pbl9TQFiNbKjs4',
              'UgxHObmG9Ifype4Dtjh4AaABAg',
              'Ugy2t0J2rMrLqVCcAxV4AaABAg',
              'UgzZWUkzBIwfWd81Azd4AaABAg.9TSUVio8FDs9TX0cFy0cPn',
              'Ugxp63hxPOpvnQXfmfN4AaABAg',
              'Ugywck2nfxGf1P-jGrV4AaABAg.9TTUaC5BZm99TUWmUYdTW3',
              'UgyF54uSxOw317OaxW94AaABAg',
              'Ugz-hiG5y5Ifo2hXQRd4AaABAg.9TPd_-XUJf_9TS3y-fezid',
              'UgwQZBclHDt-blfzYwh4AaABAg',
              'UgzZWUkzBIwfWd81Azd4AaABAg.9TSUVio8FDs9TUQsdd2w1L',
              'Ugz-hiG5y5Ifo2hXQRd4AaABAg.9TPd_-XUJf_9TQEttSsTwV',
              'Ugz-hiG5y5Ifo2hXQRd4AaABAg.9TPd_-XUJf_9TabMdgwb7s',
              'Ugz5310iuzanBWihavR4AaABAg',
              'UgzvogxMg82Kj0aW84x4AaABAg',
              'UgzZWUkzBIwfWd81Azd4AaABAg.9TSUVio8FDs9TUyS8-BWoG',
              'UgwDeZIB2YoH3gT3LNt4AaABAg',
              'UgzakPEp05WspBho1RJ4AaABAg.9TlhjvACtRu9TyzsrPsOxh',
              'UgyZtlx_fwNidAjBVdR4AaABAg',
              'UgwNv3MdCPrD0arufSZ4AaABAg',
              'UgyXBz5CH6Q9rmwcRhp4AaABAg.9TQ2wkUS5H99TxG3z1lyQL',
              'UgxUGNNhbZQnp9D_Yep4AaABAg',
              'Ugxw406F2KiRt6h0Eg54AaABAg.9TQRqjzQH199TQiRp2YQOJ',
              'Ugyi22jKbQYthMkJnaN4AaABAg',
              'Ugz-5ND1_48bvR--K-h4AaABAg',
              'Ugz5jelTNmzEROhDeUB4AaABAg',
              'UgyIBw19on3SuDypRTx4AaABAg',
              'UgxvNfLi21bGDhlsuGN4AaABAg.9TQRqu-Qzx79TWgpd0gXUF',
              'UgzaSBdz7kdutGQnJJJ4AaABAg',
              'UgyF54uSxOw317OaxW94AaABAg.9TQ42Lqa9o09Tc8fhL52xl']},
    "14": 'A Mukbanger Ate 1 Gallon Pickles. This Is What Happened To Her Brain.',
    "15": '[In the SOOP BTS ver. Season 2] Official Teaser 2',
    "16": "UCRvcDpyxCVmlLI8Q2TjRpmg",
    "17": ['VFX Artists React to SHANG-CHi Bad & Great CGi',
             'VFX Artists React to Bad & Great CGi 54 (ft. SETH ROGEN)'],
    "18": ['NFL', 'Minecraft', 'Saturday Night Live', 'SSSniperWolf', 'PBC ON FOX'],
    "19": ['I made a custom mod in minecraft with your ideas',
             'Minecraft, But You Can Upgrade TNT...',
             'Becoming SQUID GAME Host in GTA 5! (GTA 5 Mods)',
             "Minecraft, But There's Custom End City Items...",
             'Jumping SQUID GAME CARS Across ENTIRE MAP In GTA 5! (Mods)',
             'Minecraft Mobs when you log off...',
             'You Laugh You Lose Is Even Funnier In Real Life...',
             'LAST TO LEAVE THE MYSTERY MACHINE WINS $10,000',
             'I tested them in Minecraft early and so should you...',
             'We Fought a Viking Horde...',
             '100 Days, But There Are Custom Dimensions...',
             'Hermitcraft 8 Episode 14:  BETRAYING BOATEM',
             'She Wants Us DEAD! 💀 Dark Deception Chapter 4 (FGTeeV Telekinesis Gameplay)',
             'Minecraft Death Shuffle...',
             'I Survived 100 Days as a FOX in HARDCORE Minecraft!',
             'I Was In The Funniest Minecraft Competition With Dream',
             'Minecraft, But I Add A Marshmallow Every Minute... - Extra Scenes',
             'I Survived 69 Hours Using Only Minecraft Tools',
             'Philza And Wilbur TEACH Tommy To FLY And Its SCUFFED LORE! ORIGINS SMP',
             'Minecraft Mobs if they were Parents',
             'I Built an AUTOMATIC Mob Loot Farm in Minecraft Hardcore! (#22)',
             'I Found the RICHEST Server in Minecraft! *millionaire*',
             'can 1 pixel of water save you?',
             'I Won SQUID GAME In GTA 5! (Mods)',
             'I Survived 1,900 Days in HARDCORE Minecraft...',
             "2b2t's Obsidian War is Getting Ridiculous",
             'Minecraft - Last Life #3: Frightening Exploit Tactics',
             'Realistic Water in Minecraft...',
             'Minecraft but all Mobs are Dragons',
             'Minecraft, But I Add A Marshmallow Every Minute...',
             'What is the Safest Base Possible in Minecraft?',
             'So I made Dance Moves control Minecraft...',
             'I Survived 100 Days as a PANDA in HARDCORE Minecraft!',
             'Minecraft Mobs if they were Superheroes',
             'I Cheated with a "FAKE" Professional Builder in a Building Competition...',
             'Playing SQUID GAME In Minecraft!',
             "Minecraft, But You Can't Leave The End...",
             'I Designed Custom Minecraft Bosses...',
             'What Mob Should Be Added To Minecraft?',
             'SURVIVING SQUID GAME in GTA 5',
             '"Eternal" - A Minecraft Music Video ♪',
             'Minecraft but you can Eat Mobs',
             'Minecraft Manhunt but I have CUSTOM COMMANDS',
             "Minecraft, But We're All Mutant Superhumans...",
             '46 Minecraft Blocks Mojang Had To Remove',
             'I Trapped 10 YouTubers on One Block',
             'Which Mob Am I Voting For in Minecraft Live 2021?!',
             'Playing SQUID GAME in Minecraft!',
             'Minecraft But I Upgrade EVERYTHING - The ULTIMATE Survival World! | Part 4',
             'Realistic Golem Transforming',
             'Last Life: Episode 4 - UH OH!',
             'Building AUTOMATIC FARMS in Minecraft Hardcore (#52)',
             'MURDER DRONES [OFFICIAL TRAILER]',
             'I Survived 100 Days as an ENDER DRAGON in Minecraft'],
    "20": [['When someone walks in while you using the bathroom😭'],
 ['Smart Appliances, Gadgets For Every Home 🤩 Versatile Utensils, Kitchen, Makeup, Beauty #Shorts',
 'Italians reacting to ketchup on pasta 😱🇮🇹 #shorts',
 'My hidden talent #shorts'],
 ['Knot']]
}
